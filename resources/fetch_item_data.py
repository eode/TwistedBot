#! python
# -*- coding: utf-8 -*-
"""..this will be faster than manually copying all of the minecraft item info
from the website."""

from bs4 import BeautifulSoup
from urllib import urlopen
from collections import namedtuple
    
ADDRESS = "http://www.minecraftwiki.net/wiki/Data_values"

ItemData = namedtuple('ItemData', 'image_url number name props')

# compared against table.tr.text.split()
item_data_identifier = 'Icon Dec Hex Item'.split()
block_data_identifier = 'Icon Dec Hex Block type'.split()


def parse_block_data(table):
    """parse_block_data(block_data_table) -> list of ItemData objects
    Takes a block data table, returns the block data from that table as a list
    of ItemData objects.
    """
    result = []
    for block in table('tr'):
        if block.text.split() == block_data_identifier:
            continue
        data = block('td')
        image_url = data[0].img['src'] if data[0].img else ''
        number = int(data[1].text)
        name = data[3].text
        props = ''.join(data[3].sup.stripped_strings) if data[3].sup else ''
        if props:
            name = name.rsplit(props, 1)[0].strip()            
        result.append(ItemData(image_url, number, name, props))
    return result
    

def get_block_data(tables):
    """Takes a list of tables, returns a list of item data."""
    item_tables = [table for table in tables 
                   if table.tr.text.split() == block_data_identifier]
    result = []
    for table in item_tables:
        result.extend(parse_block_data(table))
    return result
        
    
def parse_item_data(table):
    """parse_item_data(item_data_table) -> list of ItemData objects
    Takes an item data table, returns the item data from that table as a list of
    ItemData objects."""
    result = []
    for item in table('tr'):
        if item.text.split() == item_data_identifier:
            continue
        data = item('td')
        image_url = data[0].img['src']
        number = int(data[1].text)
        name = data[3].text
        props = ''.join(data[3].sup.stripped_strings) if data[3].sup else ''
        if props:
            name = name.rsplit(props, 1)[0].strip()            
        result.append(ItemData(image_url, number, name, props))
    return result


def get_item_data(tables):
    """Takes a list of tables, returns a list of item data."""
    item_tables = [table for table in tables 
                   if table.tr.text.split() == item_data_identifier]
    result = []
    for table in item_tables:
        result.extend(parse_item_data(table))
    return result


def update_data(filename, noisy=True, fmt='json'):
    """Grab the data from the minecraft site, and store it in the given file,
    using the given format.
    fmt := The format to use.  Should be one of: pickle, json, repr or python
    repr will write an 'eval'able item, and python will write an importable
    module.
    """
    items = fetch_data(noisy=noisy)
    if fmt == 'pickle':
        with open(filename, 'wb') as f:
            try:
                import cPickle as pickle
            except ImportError:
                import pickle
            p = pickle.Pickler(f)
            p.dump(items)
    elif fmt == 'json':
        import json
        with open(filename, 'w') as f:
            items = [dict(i.__dict__) for i in items]
            f.write(json.dumps(items, indent=4))
    elif fmt == 'repr':
        items = [dict(i.__dict__) for i in items]
        with open(filename, 'w') as f:
            f.write(repr(items))
    elif fmt == 'python':
        f = open(filename, 'w')
        f.write("\n")
        f.write("# autogenerated file\n\n")
        f.write("from collections import namedtuple\n")
        l = "ItemData = namedtuple('ItemData', 'image_url number name props')"
        f.write(l+"\n\n")
        f.write("item_data = " + repr(items))
        f.close()
    else:
        raise ValueError("Unrecognized format: "+fmt)
    if noisy:
        print "Fetch complete."
    


def fetch_data(noisy=True):
    if noisy:
        print "Fetching name data.."
    page_data = urlopen(ADDRESS).read()
    if noisy:
        print "Parsing data.."
    soup = BeautifulSoup(page_data)
    tables = soup('table')
    item_data = get_item_data(tables)
    block_data = get_block_data(tables)
    return block_data + item_data   


def main():
    import sys
    USAGE = """Fetch the item list from the minecraft wiki.
    Usage:
        {} [filename]
    If filename is given, write to that file as a pickle.
    If not, print the information to the screen.
    """
    if len(sys.argv) > 2:
        print USAGE
        exit(1)
    elif len(sys.argv) == 2:
        for arg in sys.argv[1:]:
            if arg.lower() in ['--help', 'help', '/?', '-?', '/help']:
                print USAGE
                exit(0)
        update_data(sys.argv[1], noisy=True)
        exit(1)
    for line in fetch_data(noisy=True):
        print line


if __name__ == "__main__":
    main()

